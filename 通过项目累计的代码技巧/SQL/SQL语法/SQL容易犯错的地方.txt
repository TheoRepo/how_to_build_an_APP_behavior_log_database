1.字段改名以后，group by用哪个名字？
select app_name, app_type as app_strategy from profile.dws_app_regexp_20211030 where the_date regexp '' and app_type = '生活类' group by app_name, app_type

group by用原表的字段名称

理由：注意SQL的执行逻辑

1.1.Select语句执行顺序
select查询语句的执行顺序，可以看出首先执行FROM子句，最后执行ORDER BY

执行顺序：

(1) FROM

(2) ON

(3) JOIN

(4) WHERE

(5) GROUP BY

(6) WITH {CUBE | ROLLUP}

(7) HAVING

(8)SELECT

(9) DISTINCT

(10) ORDER BY

(11) LIMIT

1.2.以上逻辑顺序简介
以上每个步骤都会产生一个虚拟表，该虚拟表被用作下一个步骤的输入。只有最后一步生成的表才会返回给调用者。

FROM：对FROM子句中的前两个表执行笛卡尔积(交叉联接)，生成虚拟表VT1，选择相对小的表做基础表。

ON：对VT1应用ON筛选器，只有那些使为真才被插入到VT2。

OUTER (JOIN): 如果指定了OUTER JOIN(相对于CROSS JOIN或INNER JOIN)，保留表中未找到匹配的行将作为外部行添加到VT2，生成TV3。

WHERE：对VT3应用WHERE筛选器，只有使为true的行才插入VT4。

GROUP BY：按GROUP BY子句中的列对VT4中的行进行分组，生成VT5。

CUTE|ROLLUP：把超组插入VT5，生成VT6。

HAVING：对VT6应用HAVING筛选器，只有使为true的组插入到VT7。

SELECT：处理SELECT列表，产生VT8。

DISTINCT：将重复的行从VT8中删除，得到VT9。

ORDER BY：将VT9中的行按ORDER BY子句中的列列表顺序，生成一个游标(VC10)。

LIMIT(TOP)：从VC10的开始处选择指定数量或比例的行，生成表VT11，并返回给调用者。

1.2.1以上步骤2和3的进一步说明
ON子句 和 LEFT OUTER JOIN

有两张表：

学生表，字段为：班级，姓名

成绩表，字段为：姓名，成绩

现在需要返回编号班级为001班全体同学的成绩，但是这个班级有几个学生缺考，也就是说在成绩表中没有记录。

为了得到我们预期的结果我们就需要在on子句指定学生和成绩表的关系（学生.姓名=成绩.姓名），那么我们是否发现在执行第二步的时候，对于没有参加考试的学生记录就不会出现在vt2中，因为他们被on的逻辑表达式过滤掉了。

我们想返回001班所有同学的成绩，如何做？

要用LEFT OUTER JOIN就可以把左表（学生表）中没有参加考试的学生找回来



2. insert overwrite + 分区实现，规避代码重跑，数据覆盖的问题
如下的表结构设计，将app_strategy作为分区字段，当新的策略类型的数据写入，会想一张新表一样写入一个新的分区，避免了数据覆盖的问题！

# ga.interface_app_cnt_by_strategy_20210930_dt
# 手机用户的app在不同策略层面app个数统计
drop table if exists ga.interface_app_cnt_by_strategy_20210930_dt;
create table if not exists ga.interface_app_cnt_by_strategy_20210930_dt
(
mobile_id string comment '手机号',
count string comment '一个手机号某个策略类型的app种类数',
times string comment '一个手机号app行为出现的次数'
)
comment 'app标签表'
partitioned by (
app_strategy string comment 'app策略类型',
mobile_id_end_no string comment '手机尾号'
)
lifecycle 365
row format delimited fields terminated by '\t' stored as orc;

insert overwrite table ga.interface_app_cnt_by_strategy_20210930_dt partition(app_strategy,mobile_id_end_no)
select ....



3.写入分区表的时候，select末尾的字段内容和顺序与partition括号里的字段看齐
正确：

insert overwrite table ga.interface_app_cnt_by_time_20210930_dt partition(month,mobile_id_end_no)
select
mobile_id,
count(app_name),
"1" as month,
mobile_id_end_no
from
(
select mobile_id,mobile_id_end_no,app_name from profile.dws_app_all_20210530 where app_type regexp ""
and unix_timestamp(start_time,'yyyy-MM-dd HH:mm:ss') > unix_timestamp(add_months(from_unixtime(unix_timestamp(), 'yyyy-MM-dd HH:mm:ss'), -1), 'yyyy-MM-dd' )
group by mobile_id,app_name,mobile_id_end_no
) a
group by mobile_id,mobile_id_end_no;



错误：

insert overwrite table ga.interface_app_cnt_by_time_20210930_dt partition(month,mobile_id_end_no)
select
mobile_id,
"1" as month,
count(app_name)
mobile_id_end_no
from
(
select mobile_id,mobile_id_end_no,app_name from profile.dws_app_all_20210530 where app_type regexp ""
and unix_timestamp(start_time,'yyyy-MM-dd HH:mm:ss') > unix_timestamp(add_months(from_unixtime(unix_timestamp(), 'yyyy-MM-dd HH:mm:ss'), -1), 'yyyy-MM-dd' )
group by mobile_id,app_name,mobile_id_end_no
) a
group by mobile_id,mobile_id_end_no;

4. 一个脚本解决一个步骤，一个项目拆分为多个步骤，每个步骤用调度任务连接起来
APP库项目
第一步 运算涉及app结果表，千亿的数据量，创建中间表，节省运算时间  0_huge_mid_table
第二步 从app策略库和正则库中总结所有的app名称入索引库，标注，已入库   1_initial_app_from_strategy_and_regexp
第三步 从算法助理的工作结果，同步app名称到索引库，标注，已打标   3_assistant_work_input
第四步 从正则表的，同步app名称到索引库，标注，已开发    4_regexp_table_input
第五步 从app结果表，同步app名称到索引库，跑数无数据，跑数且有数据    5_result_of_code_running
第六步 表压缩 6_index_table_compress




第一步 从app策略库中同步新app名称到索引库，标注，已入库 2_new_app_assign_id
第二步 从算法助理的工作结果，同步app名称到索引库，标注，已打标   3_assistant_work_input
第三步 从正则表的，同步app名称到索引库，标注，已开发    4_regexp_table_input
第四步 从app结果表，同步app名称到索引库，跑数无数据，跑数且有数据    5_result_of_code_running
第五步 表压缩 6_index_table_compress
label标签项目
第一步 ga.interface_app_cnt_by_mobile_id_20210930_dt
手机用户的安装的app的个数统计    1_count_by_mobile_id_wj
第二步 ga.interface_app_cnt_by_strategy_20210930_dt
手机用户的app在不同策略层面app个数统计  2_count_by_strategy_wj
第三步 ga.interface_app_individual_percent_20210930_dt
手机用户的不同策略类型的app个数占app总数的百分比 3_percent_wj
第四步 
ga.interface_app_cnt_by_time_20210930_dt
手机用户的app在不同时间层面app个数统计（近1个月，3个月）

4_time_wj
第五步 多分区压缩   5_multiple_partitions_compress


5. 代码结构的解耦性
解耦性好的代码满足两个条件：

1.每一个小脚本对应一个功能个斯，各司其职，之后有新的需求进来，只是要编写新的脚本穿插数据流，拓展性很强

APP库项目初始项目和数据更新项目，work大面积重复，节省了重复开发的工作，就是因为每一work各司其职，很好的完成了它的本分



2.每个小脚本就能完成一个独立的功能，德育业务上需要实现这个功能，只是要重跑这个脚本，而不是重跑整个数据流

example：

insert overwrite table profile.dws_app_index_20211030
select
app_id,
a.app_name,
app_name_after_download,
app_apk,
package_name_after_download,
case
when B.app_name is not null and status = "已入库" then '跑数且无数据'
case
when B.app_name is not null and status = "已打标" then '跑数且无数据'
case
when B.app_name is not null and status = "已开发" then '跑数且无数据'
else status
end as status,
app_type,
type_code,
from_unixtime(unix_timestamp(),'yyyy-MM-dd') as event_time
from profile.dws_app_index_20211030_back A
left join
(select app_name from profile_test.dws_app_index_mid3 group by app_name) B
on A.app_name = B.app_name;

加入红色的判断条件，索引表的跑数且无数据status，可以通过5_result_of_code_running这个work单独实现，不用重跑整个数据流



6. 避免用函数名做字段名称
比如字段count都用cnt